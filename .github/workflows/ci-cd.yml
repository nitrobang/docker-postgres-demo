name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3️⃣ Build & Push backend
      - name: Build & Push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-backend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-backend:cache,mode=max

      # 4️⃣ Build & Push frontend
      - name: Build & Push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-frontend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-frontend:cache,mode=max

      # 5️⃣ Build & Push nginx
      - name: Build & Push nginx
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/my-nginx:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-nginx:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/my-nginx:cache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd ~/docker-postgres-demo

            # Use immutable commit SHA as tag
            export IMAGE_TAG=${GITHUB_SHA}

            # Replace image tags in docker-compose.yml
            sed -i "s|my-backend:.*|my-backend:${IMAGE_TAG}|g" docker-compose.yml
            sed -i "s|my-frontend:.*|my-frontend:${IMAGE_TAG}|g" docker-compose.yml
            sed -i "s|my-nginx:.*|my-nginx:${IMAGE_TAG}|g" docker-compose.yml

            # Start only changed services without extra pulls
            docker-compose up -d backend frontend nginx
