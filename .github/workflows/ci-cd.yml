name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3️⃣ Build backend image
      - name: Build backend Docker image
        run: |
          docker build -t my-backend -f backend/Dockerfile ./backend

      # 4️⃣ Build frontend image
      - name: Build frontend Docker image
        run: |
          docker build -t my-frontend -f frontend/Dockerfile ./frontend

      # 5️⃣ Build nginx image
      - name: Build nginx Docker image
        run: |
          docker build -t my-nginx -f nginx/Dockerfile ./nginx

      # 6️⃣ Tag and push backend
      - name: Push backend to DockerHub
        run: |
          docker tag my-backend ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

      # 7️⃣ Tag and push frontend
      - name: Push frontend to DockerHub
        run: |
          docker tag my-frontend ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest

      # 8️⃣ Tag and push nginx
      - name: Push nginx to DockerHub
        run: |
          docker tag my-nginx ${{ secrets.DOCKER_USERNAME }}/my-nginx:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx:latest

      # 9️⃣ Deploy to remote server
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cleanup server folder
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            rm -rf ~/docker-postgres-demo/*


      # Copy docker-compose.yml and configs to server
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "docker-compose.yml,init/init.sql"
          target: "~/docker-postgres-demo"

      # SSH into server and deploy
      - name: Deploy with docker-compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd ~/docker-postgres-demo
            docker-compose pull
            docker-compose up -d --force-recreate
