name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Backend
      - name: Build & Push backend
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t my-backend -f backend/Dockerfile ./backend
          docker tag my-backend ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker tag my-backend ${{ secrets.DOCKER_USERNAME }}/my-backend:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:$IMAGE_TAG

      # Frontend
      - name: Build & Push frontend
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t my-frontend -f frontend/Dockerfile ./frontend
          docker tag my-frontend ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
          docker tag my-frontend ${{ secrets.DOCKER_USERNAME }}/my-frontend:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-frontend:$IMAGE_TAG

      # Nginx
      - name: Build & Push nginx
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t my-nginx -f nginx/Dockerfile ./nginx
          docker tag my-nginx ${{ secrets.DOCKER_USERNAME }}/my-nginx:latest
          docker tag my-nginx ${{ secrets.DOCKER_USERNAME }}/my-nginx:$IMAGE_TAG
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-nginx:$IMAGE_TAG


  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: GITHUB_SHA
          script: |
            cd ~/docker-postgres-demo

            # âœ… Write IMAGE_TAG from GitHub SHA into .env
            echo "IMAGE_TAG=${GITHUB_SHA:0:7}" > .env
            cat .env   # debug

            docker-compose down --remove-orphans

            # Pull only updated images
            docker-compose pull backend frontend nginx

            # Recreate services
            docker-compose up -d --force-recreate --no-deps backend frontend nginx
